
package aps.view;

import aps.modelo.ModeloTabelas;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.internal.NonNull;
import com.google.gson.Gson;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableModel;

public class ApsViewNew extends javax.swing.JFrame {

    private String colunas[ ] = {"Fauna/Flora", "Grupo", "Família", "Espécie (Simplificada)", "Nome Comum", "Categoria", "Sigla Categoria", "Bioma", "Principais Ameaças", "Presença em Áreas Protegidas", "Plano de Ação Nacional para Conservação (PAN)", "Ordenamento Pesqueiro", "Nível de Proteção na Estratégia Nacional", "Espécie exclusiva do Brasil", "Estados de Ocorrência"};
    private ArrayList<ModeloTabelas> lista = new ArrayList<ModeloTabelas>( );
    private ArrayList<ModeloTabelas> listaConsulta = new ArrayList<ModeloTabelas>( );
    private ApsTabelasModelo tabela;
    private ApsTabelasModelo tabelaFiltrada;
    private DatabaseReference apsFirebase = FirebaseDatabase.getInstance( ).getReference( ).child("especies");
    
    public ApsViewNew() {
        initComponents();
        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel_Titulo = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnSincronizar = new javax.swing.JButton();
        btnConectar = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        btnConsultar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        painelDADOS = new javax.swing.JPanel();
        lblFaunaFlora = new javax.swing.JLabel();
        lblGrupo = new javax.swing.JLabel();
        lblFamilia = new javax.swing.JLabel();
        edtCons_Grupo = new javax.swing.JTextField();
        edtCons_Familia = new javax.swing.JTextField();
        cBox_FaunaFlora = new javax.swing.JComboBox<>();
        edtCons_Especie = new javax.swing.JTextField();
        lblEspecie = new javax.swing.JLabel();
        edtCons_Bioma = new javax.swing.JTextField();
        lblBioma = new javax.swing.JLabel();
        edtCons_CatAmeaca = new javax.swing.JTextField();
        lblCatAmeaca = new javax.swing.JLabel();
        edtCons_PrincAmeacas = new javax.swing.JTextField();
        edtCons_NomeComum = new javax.swing.JTextField();
        edtCons_EstadoOcorr = new javax.swing.JTextField();
        lblEstadoOcorr = new javax.swing.JLabel();
        lblNomeComum = new javax.swing.JLabel();
        lblPrincAmeacas = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblConsulta = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(153, 153, 153));
        setForeground(new java.awt.Color(102, 102, 102));

        jLabel_Titulo.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel_Titulo.setForeground(new java.awt.Color(0, 102, 0));
        jLabel_Titulo.setText("INTEGRAÇÃO JAVA COM GOOGLE FIREBASE");

        btnSincronizar.setBackground(new java.awt.Color(0, 102, 0));
        btnSincronizar.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnSincronizar.setForeground(new java.awt.Color(255, 255, 255));
        btnSincronizar.setText("Sincronizar");
        btnSincronizar.setBorder(null);
        btnSincronizar.setFocusPainted(false);
        btnSincronizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSincronizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSincronizarActionPerformed(evt);
            }
        });

        btnConectar.setBackground(new java.awt.Color(0, 102, 0));
        btnConectar.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnConectar.setForeground(new java.awt.Color(255, 255, 255));
        btnConectar.setMnemonic('0');
        btnConectar.setText("Conectar");
        btnConectar.setBorder(null);
        btnConectar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnConectar.setFocusPainted(false);
        btnConectar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnConectar.setMaximumSize(new java.awt.Dimension(128, 30));
        btnConectar.setMinimumSize(new java.awt.Dimension(128, 30));
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });

        btnSair.setBackground(new java.awt.Color(0, 102, 0));
        btnSair.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnSair.setForeground(new java.awt.Color(255, 255, 255));
        btnSair.setText("Sair");
        btnSair.setBorder(null);
        btnSair.setFocusPainted(false);
        btnSair.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        btnConsultar.setBackground(new java.awt.Color(0, 102, 0));
        btnConsultar.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnConsultar.setForeground(new java.awt.Color(255, 255, 255));
        btnConsultar.setText("Consultar");
        btnConsultar.setBorder(null);
        btnConsultar.setFocusPainted(false);
        btnConsultar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        btnLimpar.setBackground(new java.awt.Color(0, 102, 0));
        btnLimpar.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnLimpar.setForeground(new java.awt.Color(255, 255, 255));
        btnLimpar.setText("Limpar");
        btnLimpar.setBorder(null);
        btnLimpar.setFocusPainted(false);
        btnLimpar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(btnConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                .addComponent(btnSincronizar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(152, 152, 152)
                .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(161, 161, 161)
                .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(154, 154, 154))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSincronizar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLimpar, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(btnConsultar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        lblFaunaFlora.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblFaunaFlora.setForeground(new java.awt.Color(0, 153, 0));
        lblFaunaFlora.setText("Fauna/Flora");

        lblGrupo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblGrupo.setForeground(new java.awt.Color(0, 153, 0));
        lblGrupo.setText("Grupo");

        lblFamilia.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblFamilia.setForeground(new java.awt.Color(0, 153, 0));
        lblFamilia.setText("Família");

        edtCons_Grupo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        edtCons_Familia.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        cBox_FaunaFlora.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fauna", "Flora" }));

        edtCons_Especie.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblEspecie.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblEspecie.setForeground(new java.awt.Color(0, 153, 0));
        lblEspecie.setText("Espécie");

        edtCons_Bioma.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblBioma.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblBioma.setForeground(new java.awt.Color(0, 153, 0));
        lblBioma.setText("Bioma");

        edtCons_CatAmeaca.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblCatAmeaca.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblCatAmeaca.setForeground(new java.awt.Color(0, 153, 0));
        lblCatAmeaca.setText("Categoria Ameaça");

        edtCons_PrincAmeacas.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        edtCons_NomeComum.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        edtCons_EstadoOcorr.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblEstadoOcorr.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblEstadoOcorr.setForeground(new java.awt.Color(0, 153, 0));
        lblEstadoOcorr.setText("Estados de Ocorrência");

        lblNomeComum.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblNomeComum.setForeground(new java.awt.Color(0, 153, 0));
        lblNomeComum.setText("Nome Comum");

        lblPrincAmeacas.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblPrincAmeacas.setForeground(new java.awt.Color(0, 153, 0));
        lblPrincAmeacas.setText("Principais Ameaças");

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 0));
        jLabel1.setText("Filtro de Consulta");

        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tblConsulta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblConsulta);

        javax.swing.GroupLayout painelDADOSLayout = new javax.swing.GroupLayout(painelDADOS);
        painelDADOS.setLayout(painelDADOSLayout);
        painelDADOSLayout.setHorizontalGroup(
            painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDADOSLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelDADOSLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelDADOSLayout.createSequentialGroup()
                        .addGroup(painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelDADOSLayout.createSequentialGroup()
                                .addGroup(painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(edtCons_CatAmeaca, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelDADOSLayout.createSequentialGroup()
                                        .addGroup(painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(painelDADOSLayout.createSequentialGroup()
                                                .addComponent(lblFaunaFlora)
                                                .addGap(0, 27, Short.MAX_VALUE))
                                            .addComponent(cBox_FaunaFlora, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(edtCons_Grupo, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblGrupo)))
                                    .addGroup(painelDADOSLayout.createSequentialGroup()
                                        .addComponent(lblCatAmeaca)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(painelDADOSLayout.createSequentialGroup()
                                        .addGroup(painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(edtCons_Familia, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblFamilia))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(edtCons_Especie, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblEspecie))
                                        .addGap(18, 18, 18)
                                        .addGroup(painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblBioma)
                                            .addComponent(edtCons_Bioma, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(painelDADOSLayout.createSequentialGroup()
                                        .addGroup(painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(edtCons_PrincAmeacas, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblPrincAmeacas))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(edtCons_NomeComum, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblNomeComum))
                                        .addGap(18, 18, 18)
                                        .addGroup(painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblEstadoOcorr)
                                            .addComponent(edtCons_EstadoOcorr, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(17, 17, 17))))
        );
        painelDADOSLayout.setVerticalGroup(
            painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDADOSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFaunaFlora)
                    .addComponent(lblGrupo)
                    .addComponent(lblFamilia)
                    .addComponent(lblEspecie)
                    .addComponent(lblBioma))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cBox_FaunaFlora, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(edtCons_Grupo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(edtCons_Familia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(edtCons_Especie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(edtCons_Bioma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addGroup(painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCatAmeaca)
                    .addComponent(lblPrincAmeacas)
                    .addComponent(lblNomeComum)
                    .addComponent(lblEstadoOcorr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelDADOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edtCons_CatAmeaca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edtCons_PrincAmeacas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edtCons_NomeComum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edtCons_EstadoOcorr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel_Titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(181, 181, 181))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(117, 117, 117))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(painelDADOS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_Titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(painelDADOS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarActionPerformed
        conectar();
    }//GEN-LAST:event_btnConectarActionPerformed

    private void btnSincronizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSincronizarActionPerformed
        sincronizar();
    }//GEN-LAST:event_btnSincronizarActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        filtroPesquisa();
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        edtCons_Grupo.setText("");
        edtCons_Familia.setText("");
        edtCons_Especie.setText("");
        edtCons_Bioma.setText("");
        edtCons_CatAmeaca.setText("");
        edtCons_PrincAmeacas.setText("");
        edtCons_NomeComum.setText("");
        edtCons_EstadoOcorr.setText("");
        
        conectar( );
    }//GEN-LAST:event_btnLimparActionPerformed

    private void conectar() {

        try {
            apsFirebase.addValueEventListener(new ValueEventListener() {

                @Override
                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                    lista.clear( );
                    
                    for (DataSnapshot ds : dataSnapshot.getChildren()) {
                        ModeloTabelas dado = ds.getValue(ModeloTabelas.class);
                        lista.add(dado);
                    }
                    tabela = new ApsTabelasModelo(lista, colunas);
                    tblConsulta.setModel((TableModel) tabela);
                    tblConsulta.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                }

                @Override
                public void onCancelled(DatabaseError e) {
                    JOptionPane.showMessageDialog(null, "Operação Cancelada \n" + e.getMessage());

                }

            });
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro na Operação \n" + e.getMessage());
        }
    }

    private void sincronizar() {
        try {
            apsFirebase.child("especies").removeValue(new DatabaseReference.CompletionListener() {
                @Override
                public void onComplete(DatabaseError firebaseError, DatabaseReference firebase) {
                    if (firebaseError == null) {
                        JOptionPane.showMessageDialog(null, "Dados excluídos com Sucesso!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Erro na Exclusão dos Dados!");
                    }
                }
            });

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro na Exclusão dos Dados \n" + ex.getMessage());
        }
            
        
        String csvArquivo = "C:\\Users\\ranie\\Documents\\lista-de-especies-ameacas-2020-separador.csv";

        BufferedReader conteudoCSV = null;

        String linha = " ";

        String csvSeparador = ";";
        
        try {
//            conteudoCSV = new BufferedReader(new FileReader(csvArquivo));
            conteudoCSV = new BufferedReader(new InputStreamReader(new FileInputStream(csvArquivo), "UTF-8"));
            

            while ((linha = conteudoCSV.readLine()) != null) {

                String[] x = linha.split(csvSeparador);

                ModeloTabelas teste = new ModeloTabelas();

                teste.setFaunaFlora(x[0]);
                teste.setGrupo(x[1]);
                teste.setFamilia(x[2]);
                teste.setEspecie(x[3]);
                teste.setNomeComum(x[4]);
                teste.setCategoria(x[5]);
                teste.setSiglaCategoria(x[6]);
                teste.setBioma(x[7]);
                teste.setPrincipaisAmeacas(x[8]);
                teste.setAreaProtegida(x[9]);
                teste.setPlanoAcaoConservacao(x[10]);
                teste.setOrdenamentoPesqueiro(x[11]);
                teste.setNivelProtecao(x[12]);
                teste.setEspecieExclusivaBrasil(x[13]);
                teste.setEstadoOcorrencia(x[14]);

                lista.add(teste);
            }
            
            Gson gson = new Gson(); // conversor
//            gson.f

            apsFirebase.setValue(lista, new DatabaseReference.CompletionListener() {
                @Override
                public void onComplete(DatabaseError de, DatabaseReference dr) {
//                        lista.add(teste);
//                        gson.toJson(lista);
                        JOptionPane.showMessageDialog(null, "Dados Gravados com Sucesso no Firebase!");
                }
            });

        } catch (FileNotFoundException e) {
            System.out.println("Arquivo não encontrado: \n" + e.getMessage());
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println(" IndexOutOfBounds: \n" + e.getMessage());
        } catch (IOException e) {
            System.out.println(" IO Erro: \n" + e.getMessage());
        } finally {
            if (conteudoCSV != null) {
                try {
                    conteudoCSV.close();
                } catch (IOException e) {
                    System.out.println(" IO Erro: \n" + e.getMessage());
                }
            }
        }
    }
    

    private void filtroPesquisa() {
        listaConsulta.clear();
        String grupo = edtCons_Grupo.getText().toLowerCase().trim();
        String familia = edtCons_Familia.getText().toLowerCase().trim();
        String especie = edtCons_Especie.getText().toLowerCase().trim();
        String bioma = edtCons_Bioma.getText().toLowerCase().trim();
        String categoriaAmeaca = edtCons_CatAmeaca.getText().toLowerCase().trim();
        String principaisAmeacas = edtCons_PrincAmeacas.getText().toLowerCase().trim();
        String nomeComum = edtCons_NomeComum.getText().toLowerCase().trim();
        String estadoOcorrencia = edtCons_EstadoOcorr.getText().trim();

        String faunaFlora = (String) cBox_FaunaFlora.getSelectedItem();
        grupo = grupo.replace("i", "i");

        boolean testeFiltro = true;

        for (int i = 0; i < lista.size(); i++) {
            testeFiltro = true;

            if (!grupo.equals(" ")) {
                if (!lista.get(i).getGrupo().trim().toLowerCase().equals(grupo)) {
                    testeFiltro = false;
                }
            }
            if (!familia.equals(" ")) {
                if (!lista.get(i).getFamilia().trim().toLowerCase().equals(familia)) {
                    testeFiltro = false;
                }
            }
            if (!especie.equals(" ")) {
                if (!lista.get(i).getEspecie().trim().toLowerCase().equals(especie)) {
                    testeFiltro = false;
                }
            }
            if (!bioma.equals(" ")) {
                if (!lista.get(i).getBioma().trim().toLowerCase().equals(bioma)) {
                    testeFiltro = false;
                }
            }
            if (!categoriaAmeaca.equals(" ")) {
                if (!lista.get(i).getCategoria().trim().toLowerCase().equals(categoriaAmeaca)) {
                    testeFiltro = false;
                }
            }
            if (!principaisAmeacas.equals(" ")) {
                if (!lista.get(i).getPrincipaisAmeacas().trim().toLowerCase().equals(principaisAmeacas)) {
                    testeFiltro = false;
                }
            }
            if (!nomeComum.equals(" ")) {
                if (!lista.get(i).getNomeComum().trim().toLowerCase().equals(nomeComum)) {
                    testeFiltro = false;
                }
            }
            if (!estadoOcorrencia.equals(" ")) {
                if (!lista.get(i).getEstadoOcorrencia().trim().toLowerCase().equals(estadoOcorrencia)) {
                    testeFiltro = false;
                }
            }
            if (!faunaFlora.equals("Selecionar")) {
                if (!lista.get(i).getFaunaFlora().equals(faunaFlora)) {
                    testeFiltro = false;
                }
            }

            if (testeFiltro) {
                listaConsulta.add(lista.get(i));
            }
        }

        tabelaFiltrada = new ApsTabelasModelo(listaConsulta, colunas);
        tblConsulta.setModel(tabelaFiltrada);
        tblConsulta.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConectar;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnSincronizar;
    private javax.swing.JComboBox<String> cBox_FaunaFlora;
    private javax.swing.JTextField edtCons_Bioma;
    private javax.swing.JTextField edtCons_CatAmeaca;
    private javax.swing.JTextField edtCons_Especie;
    private javax.swing.JTextField edtCons_EstadoOcorr;
    private javax.swing.JTextField edtCons_Familia;
    private javax.swing.JTextField edtCons_Grupo;
    private javax.swing.JTextField edtCons_NomeComum;
    private javax.swing.JTextField edtCons_PrincAmeacas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_Titulo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBioma;
    private javax.swing.JLabel lblCatAmeaca;
    private javax.swing.JLabel lblEspecie;
    private javax.swing.JLabel lblEstadoOcorr;
    private javax.swing.JLabel lblFamilia;
    private javax.swing.JLabel lblFaunaFlora;
    private javax.swing.JLabel lblGrupo;
    private javax.swing.JLabel lblNomeComum;
    private javax.swing.JLabel lblPrincAmeacas;
    private javax.swing.JPanel painelDADOS;
    private javax.swing.JTable tblConsulta;
    // End of variables declaration//GEN-END:variables
}
